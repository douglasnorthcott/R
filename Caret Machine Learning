library(HistData)
galton_heights <- GaltonFamilies %>%
     filter(childNum == 1 & gender == "male") %>%
     select(father, childHeight) %>%
     rename(son = childHeight)
     
library(caret)
y <- galton_heights$son
test_index <- createDataPartition(y, times= 1, p= 0.5, list= FALSE)

train_set <- galton_heights %>% slice(-test_index)
test_set <- galton_heights %>% slice(test_index)

avg <- mean(train_set$son)
mean((avg-test_set$son)^2)
fit <- lm(son ~ father, data = train_set)

fit$coef
y_hat <- fit$coef[1] + fit$coef[2]*test_set$father
mean((y_hat - test_set$son)^2)

N <- 500
  RMSE <- replicate(n , {
  
    test_index <- createDataPartition(dat$y, times = 1, p = 0.5, list = FALSE)
    
    train_set <- dat %>% slice(-test_index)
    test_set <- dat %>% slice(test_index)
    
    # Train linear model
    fit <- lm(y ~ x, data = train_set)
    
    # Loss Function
    y_hat <- predict(fit, test_set)
    sqrt(mean((y_hat - test_set$y)^2))
  })
  set.seed(1)
  n <-100
  res <- sapply(n, function(n){
          Sigma <- 9*matrix(c(1.0, 0.95, 0.95, 1.0), 2, 2)
          dat <- MASS::mvrnorm(n = 100, c(69, 69), Sigma) %>%
	     data.frame() %>% setNames(c("x", "y"))
          	rmse <- replicate(100, {
		test_index <- createDataPartition(dat$y, times = 1, p = 0.5, list = FALSE)
		train_set <- dat %>% slice(-test_index)
		test_set <- dat %>% slice(test_index)
		fit <- lm(y ~ x, data = train_set)
		y_hat <- predict(fit, newdata = test_set)
		sqrt(mean((y_hat-test_set$y)^2))
	})
	c(avg = mean(rmse), sd = sd(rmse))
})
res

res
